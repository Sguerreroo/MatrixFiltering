/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Entrar
 */
public class MainWindow extends javax.swing.JFrame {

    private int[][] mainMatrix = new int[0][0];
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }
    
    private int[][] generateMatrix() {
        
        int[][] matrix = new int[0][0];
        
        try {
            int dimension = Integer.parseInt(matrixDimensionTextField.getText());
         
            if (dimension > 10 || dimension < 0) return matrix;
            
            int minValue = Integer.parseInt(minimumMatrixValueTextField.getText());
            int maxValue = Integer.parseInt(maximumMatrixValueTextField.getText());
            
            if (minValue >= maxValue) return matrix;
            
            matrix = new int[dimension][dimension];
        
            for (int i = 0; i < dimension; i++) {
                for (int j = 0; j < dimension; j++) {
                    matrix[i][j] = (int) Math.floor(Math.random() *
                            (maxValue + 1 - minValue) + minValue);
                }
            }
        
        } catch (NumberFormatException e) {}
        
        return matrix;
    }
    
    private void writeMatrix(int[][] matrix) {
        String matrixText = "";
        int threshold = thresholdSlider.getValue();
        
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                if (matrix[i][j] <= threshold)
                    matrixText += "-\t";
                else
                    matrixText += String.valueOf(matrix[i][j]) + "\t";
            }
            matrixText += "\n";
        }
        matrixTextArea.setText(matrixText);
    }
    
    private void updateSlider() {
        try {
            thresholdSlider.setMaximum(Integer.parseInt(maximumMatrixValueTextField.getText()));
            thresholdSlider.setMinimum(Integer.parseInt(minimumMatrixValueTextField.getText()));            
        } catch (NumberFormatException e) {}
    }
    
    private void newMatrix(java.awt.event.KeyEvent evt) {
        if (!isANumber(evt)) return;
        mainMatrix = generateMatrix();
        writeMatrix(mainMatrix);
    }
    
    private boolean isANumber(java.awt.event.KeyEvent evt) {
        String character = String.valueOf(evt.getKeyChar());
        if (!character.matches("(\\d||\b)")) {
            evt.consume();
            return false;
        } else
            return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matrixConfigurationFieldsPanel = new javax.swing.JPanel();
        matrixDimensionLabel = new javax.swing.JLabel();
        minimumMatrixValueLabel = new javax.swing.JLabel();
        maximumMatrixValueLabel = new javax.swing.JLabel();
        thresholdLabel = new javax.swing.JLabel();
        matrixDimensionTextField = new javax.swing.JTextField();
        minimumMatrixValueTextField = new javax.swing.JTextField();
        maximumMatrixValueTextField = new javax.swing.JTextField();
        thresholdSlider = new javax.swing.JSlider();
        informationLabel = new javax.swing.JLabel();
        matrixPanel = new javax.swing.JPanel();
        matrixScrollPane = new javax.swing.JScrollPane();
        matrixTextArea = new javax.swing.JTextArea();
        authorsLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 580));

        matrixConfigurationFieldsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        matrixDimensionLabel.setText("Dimensión Matrix Cuadrada:");

        minimumMatrixValueLabel.setText("Valor Mínimo Matriz:");

        maximumMatrixValueLabel.setText("Valor Máximo Matriz:");

        thresholdLabel.setText("Umbral:");

        matrixDimensionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                matrixDimensionTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                matrixDimensionTextFieldKeyTyped(evt);
            }
        });

        minimumMatrixValueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minimumMatrixValueTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minimumMatrixValueTextFieldKeyTyped(evt);
            }
        });

        maximumMatrixValueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maximumMatrixValueTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maximumMatrixValueTextFieldKeyTyped(evt);
            }
        });

        thresholdSlider.setMajorTickSpacing(5);
        thresholdSlider.setMaximum(0);
        thresholdSlider.setMinorTickSpacing(1);
        thresholdSlider.setPaintLabels(true);
        thresholdSlider.setPaintTicks(true);
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });

        informationLabel.setText("(Máximo 10, mínimo 0)");

        javax.swing.GroupLayout matrixConfigurationFieldsPanelLayout = new javax.swing.GroupLayout(matrixConfigurationFieldsPanel);
        matrixConfigurationFieldsPanel.setLayout(matrixConfigurationFieldsPanelLayout);
        matrixConfigurationFieldsPanelLayout.setHorizontalGroup(
            matrixConfigurationFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixConfigurationFieldsPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(matrixConfigurationFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matrixConfigurationFieldsPanelLayout.createSequentialGroup()
                        .addComponent(thresholdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thresholdSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE))
                    .addGroup(matrixConfigurationFieldsPanelLayout.createSequentialGroup()
                        .addComponent(matrixDimensionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(matrixDimensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(informationLabel))
                    .addGroup(matrixConfigurationFieldsPanelLayout.createSequentialGroup()
                        .addComponent(minimumMatrixValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minimumMatrixValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(maximumMatrixValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maximumMatrixValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );
        matrixConfigurationFieldsPanelLayout.setVerticalGroup(
            matrixConfigurationFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixConfigurationFieldsPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(matrixConfigurationFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matrixDimensionLabel)
                    .addComponent(matrixDimensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(informationLabel))
                .addGap(26, 26, 26)
                .addGroup(matrixConfigurationFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minimumMatrixValueLabel)
                    .addComponent(maximumMatrixValueLabel)
                    .addComponent(minimumMatrixValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maximumMatrixValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(matrixConfigurationFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thresholdLabel))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        matrixPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        matrixTextArea.setColumns(20);
        matrixTextArea.setRows(5);
        matrixScrollPane.setViewportView(matrixTextArea);

        javax.swing.GroupLayout matrixPanelLayout = new javax.swing.GroupLayout(matrixPanel);
        matrixPanel.setLayout(matrixPanelLayout);
        matrixPanelLayout.setHorizontalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matrixScrollPane)
                .addContainerGap())
        );
        matrixPanelLayout.setVerticalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matrixScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );

        authorsLabel.setText("Nelson González Machín, Samuel Guerra Marrero");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrixPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matrixConfigurationFieldsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(authorsLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matrixConfigurationFieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(matrixPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authorsLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void matrixDimensionTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_matrixDimensionTextFieldKeyReleased
        newMatrix(evt);
    }//GEN-LAST:event_matrixDimensionTextFieldKeyReleased

    private void minimumMatrixValueTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minimumMatrixValueTextFieldKeyReleased
        newMatrix(evt);
        updateSlider();
    }//GEN-LAST:event_minimumMatrixValueTextFieldKeyReleased

    private void maximumMatrixValueTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maximumMatrixValueTextFieldKeyReleased
        newMatrix(evt);
        updateSlider();
    }//GEN-LAST:event_maximumMatrixValueTextFieldKeyReleased

    private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSliderStateChanged
        writeMatrix(mainMatrix);
    }//GEN-LAST:event_thresholdSliderStateChanged

    private void matrixDimensionTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_matrixDimensionTextFieldKeyTyped
        isANumber(evt);
    }//GEN-LAST:event_matrixDimensionTextFieldKeyTyped

    private void minimumMatrixValueTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minimumMatrixValueTextFieldKeyTyped
        isANumber(evt);
    }//GEN-LAST:event_minimumMatrixValueTextFieldKeyTyped

    private void maximumMatrixValueTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maximumMatrixValueTextFieldKeyTyped
        isANumber(evt);
    }//GEN-LAST:event_maximumMatrixValueTextFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authorsLabel;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JPanel matrixConfigurationFieldsPanel;
    private javax.swing.JLabel matrixDimensionLabel;
    private javax.swing.JTextField matrixDimensionTextField;
    private javax.swing.JPanel matrixPanel;
    private javax.swing.JScrollPane matrixScrollPane;
    private javax.swing.JTextArea matrixTextArea;
    private javax.swing.JLabel maximumMatrixValueLabel;
    private javax.swing.JTextField maximumMatrixValueTextField;
    private javax.swing.JLabel minimumMatrixValueLabel;
    private javax.swing.JTextField minimumMatrixValueTextField;
    private javax.swing.JLabel thresholdLabel;
    private javax.swing.JSlider thresholdSlider;
    // End of variables declaration//GEN-END:variables
}
